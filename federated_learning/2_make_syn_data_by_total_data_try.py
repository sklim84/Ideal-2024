import numpy as np
import pandas as pd
import syft as sy
from ctgan import CTGAN
import torch
import copy
from collections import OrderedDict
import warnings

warnings.filterwarnings("ignore", category=FutureWarning)


def initialize_device():
    # FIXME torch 버전 등 이슈로 cpu만 인식 중
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Using device: {device}")
    return device


def load_data(file_path, num_samples=1000):
    data = pd.read_csv(file_path)[:num_samples]
    data = data.apply(pd.to_numeric, errors='coerce').fillna(0).astype(np.int64)
    return data

def train_ctgan(data, emb_dim=32, gen_dim=64, dis_dim=64, epoch=10, pac=10):
    print("Data content (first 5 rows):")
    print(data[:5])

    if hasattr(data, 'child'):
        data = data.child

    if isinstance(data, pd.DataFrame):
        data_list = data.values
    elif isinstance(data, np.ndarray):
        # numpy array인 경우 DataFrame으로 변환
        data_list = pd.DataFrame(data.tolist(), columns=['BASE_YM', 'HNDE_BANK_RPTV_CODE', 'OPENBANK_RPTV_CODE', 'FND_TPCD', 'TRAN_AMT'])
    else:
        raise ValueError(f"Unexpected data type: {type(data)}")

    if len(data_list) == 0 or len(data_list[0]) != 5:
        raise ValueError(f"Data does not have the expected shape: {data_list[:5]}")

    columns = ['BASE_YM', 'HNDE_BANK_RPTV_CODE', 'OPENBANK_RPTV_CODE', 'FND_TPCD', 'TRAN_AMT']
    data_df = pd.DataFrame(data_list, columns=columns)

    model = CTGAN(
        embedding_dim=emb_dim,
        generator_dim=(gen_dim, gen_dim),
        discriminator_dim=(dis_dim, dis_dim),
        epochs=epoch,
        pac=pac
    )
    print(model)

    # FIXME discrete_columns 설정 (OPENBANK_RPTV_CODE,FND_TPCD 추가)
    model.fit(data_df, discrete_columns=['HNDE_BANK_RPTV_CODE'])
    return model


if __name__ == "__main__":
    device = initialize_device()

    # 타행이체거래내역
    data_100 = load_data('./datasets/DATOP_HF_TRANS_100.csv', num_samples=100)
    data_101 = load_data('./datasets/DATOP_HF_TRANS_101.csv', num_samples=100)
    data_102 = load_data('./datasets/DATOP_HF_TRANS_102.csv', num_samples=100)

    data_total = pd.concat([data_100, data_101, data_102], axis=0).reset_index(drop=True)

    model = train_ctgan(data_total)

    if model:
        synthetic_data = model.sample(300)
        synthetic_data['TRAN_AMT'] = synthetic_data['TRAN_AMT'].abs()
        synthetic_data.to_csv('data/synthetic_data_type1.csv', index=False)
        print("Synthetic Data Generated by the Federated Model:")
        print(synthetic_data)
    else:
        print("No models were successfully trained.")
