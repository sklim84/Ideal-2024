import numpy as np
import pandas as pd
import syft as sy
from ctgan.synthesizers.tvae import TVAE
import torch
import copy
from collections import OrderedDict
import warnings
from utils import set_seed, evaluate_syn_data
from config import get_config
import os

warnings.filterwarnings("ignore")


def initialize_device():
    # FIXME torch 버전 등 이슈로 cpu만 인식 중
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Using device: {device}")
    return device


def load_data(file_path, num_samples=1000):
    data = pd.read_csv(file_path)[:num_samples]
    data = data.apply(pd.to_numeric, errors='coerce').fillna(0).astype(np.int64)
    return data

def train_ctgan(data, total_columns, discrete_columns, emb_dim=16, gen_dim=16, dis_dim=16, batch_size=500, epoch=10, pac=10):
    print("Data content (first 5 rows):")
    print(data[:5])

    if hasattr(data, 'child'):
        data = data.child

    if isinstance(data, pd.DataFrame):
        data_list = data.values
    elif isinstance(data, np.ndarray):
        # numpy array인 경우 DataFrame으로 변환
        data_list = pd.DataFrame(data.tolist(), columns=['BASE_YM', 'HNDE_BANK_RPTV_CODE', 'OPENBANK_RPTV_CODE', 'FND_TPCD', 'TRAN_AMT'])
    else:
        raise ValueError(f"Unexpected data type: {type(data)}")

    if len(data_list) == 0 or len(data_list[0]) != 5:
        raise ValueError(f"Data does not have the expected shape: {data_list[:5]}")

    # columns = ['BASE_YM', 'HNDE_BANK_RPTV_CODE', 'OPENBANK_RPTV_CODE', 'FND_TPCD', 'TRAN_AMT']
    data_df = pd.DataFrame(data_list, columns=total_columns)

    model = TVAE(
        embedding_dim=emb_dim,
        compress_dims=(gen_dim, gen_dim),
        decompress_dims=(dis_dim, dis_dim),
        batch_size=batch_size,
        epochs=epoch
    )
    print(model)

    model.fit(data_df, discrete_columns=discrete_columns)
    # model.fit(data_df, discrete_columns=['HNDE_BANK_RPTV_CODE'])
    return model


if __name__ == "__main__":
    args = get_config()
    print(args)

    set_seed(args.seed)

    device = initialize_device()

    num_samples_org = args.num_samples_org
    num_samples_syn = args.num_samples_syn

    bank_codes = [100, 102, 104]

    datasets = [
        load_data(f'./datasets/DATOP_HF_TRANS_{bank_codes[0]}_iid.csv', num_samples=num_samples_org),
        load_data(f'./datasets/DATOP_HF_TRANS_{bank_codes[1]}_iid.csv', num_samples=num_samples_org),
        load_data(f'./datasets/DATOP_HF_TRANS_{bank_codes[2]}_iid.csv', num_samples=num_samples_org)
    ]
    data_total = pd.concat(datasets, axis=0).reset_index(drop=True)

    total_columns = data_total.columns
    discrete_columns = ['BASE_YM', 'HNDE_BANK_RPTV_CODE', 'OPENBANK_RPTV_CODE', 'FND_TPCD']

    model = train_ctgan(data=data_total,
                        total_columns=total_columns,
                        discrete_columns=discrete_columns,
                        emb_dim=args.emb_dim,
                        gen_dim=args.gen_dim, dis_dim=args.dis_dim,
                        batch_size=args.batch_size,
                        epoch=args.epoch)

    synthetic_data = model.sample(num_samples_syn)
    synthetic_data['TRAN_AMT'] = synthetic_data['TRAN_AMT'].abs()
    print("Synthetic Data Generated by the Model:")
    print(synthetic_data)

    args.syn_data_path = os.path.join(args.syn_data_path, f'syn_type_{args.method}_{args.model_name}_{args.num_samples_org}_to_{args.num_samples_syn}.csv')
    synthetic_data.to_csv(args.syn_data_path, index=False)

    # evaluation
    df_results = evaluate_syn_data(args)
    print(df_results)
